apply plugin: "java"
apply plugin: "edu.sc.seis.macAppBundle"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
compileJava.options.incremental = true

sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.crashinvaders.texturepackergui.desktop.ApplicationStarter"
project.ext.distFileName = "$project.appName-$project.ext.version"
project.ext.resourceDirs = files('resources/', "$rootDir/assets/")

dependencies {
    runtime files(project.resourceDirs)
    implementation project(":core")
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    implementation "com.github.czyzby:gdx-autumn-fcs:$lmlVersion"
    implementation "args4j:args4j:$args4jVersion"
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    classpath(project.resourceDirs)
    standardInput = System.in
    ignoreExitValue = true

    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        jvmArgs += ['-XstartOnFirstThread']
    }
}

task dist(type: Jar) {
    dependsOn configurations.runtimeClasspath
    from configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it) } with jar

    // Exclude unnecessary JARs that bundled with Tinify Maven artifact.
    // Remove after https://github.com/tinify/tinify-java/issues/9 gets resolved.
    exclude(
            "/gson-*.jar",
            "/okhttp-*.jar",
            "/okio-*.jar")

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task distRelease(type: Jar) {
    dependsOn configurations.runtimeClasspath
    from configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it) } with jar

    // Exclude unnecessary JARs that bundled with Tinify Maven artifact.
    // Remove after https://github.com/tinify/tinify-java/issues/9 gets resolved.
    exclude(
            "/gson-*.jar",
            "/okhttp-*.jar",
            "/okio-*.jar")

    manifest {
        attributes 'Main-Class': project.mainClassName
    }

    archiveFileName = "$project.appName.$extension"
    destinationDirectory = file("$rootDir/distribution/output")
}

task zipRelease(type: Zip) {
    from distRelease
    from file("../distribution/files")
    archiveFileName = "$project.distFileName.$extension"
    destinationDirectory = file("$rootDir/distribution/output")
}
zipRelease.dependsOn distRelease

//region NSIS Installer
/**
 * Task to create Windows installer using NSIS.
 *
 * In order to make it work, you need:
 *     1. Windows OS only.
 *     2. NSIS installed on your system and added to PATH (makensis.exe).
 *          https://sourceforge.net/projects/nsis/files/
 *     3. ZipDLL NSIS extension should be installed.
 *          http://nsis.sourceforge.net/ZipDLL_plug-in
 *     4. FileAssoc macros should be installed.
 *          Copy code from http://nsis.sourceforge.net/FileAssoc
 *          into file "FileAssoc.nsh" and put it under "<NSIS_DIR>/Include/"
 *
 * After task execution, the output files can be found under "./distribution/output/".
 */
task nsisInstaller(type: Exec) {
    if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        println 'NSIS installer can be created only on Windows.';
        return;
    }

    workingDir '../distribution'

    def nsisCommand = "makensis /DFILENAME=\"$project.distFileName\" installer-nsis.nsi"
    commandLine 'cmd', '/c', "$nsisCommand"
}
nsisInstaller.dependsOn zipRelease
//endregion

//region Mac App Bundle
macAppBundle {
    mainClassName = project.mainClassName
    bundleIdentifier = 'com.crashinvaders.texturepackergui'
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    bundleJRE = false
    appName = "GDX Texture Packer"
    dmgName = "gdx-texturepacker-$project.ext.version"
    icon = "icons.icns"
//    backgroundImage = "doc/macbackground.png"
}

// Since macAppBundle 2.1.6 doesn't let us customize jar assembling. So we will simply swap files by hand.
task cleanAppJavaDir (type: Delete) {
    delete fileTree(dir: "build/$macAppBundle.appOutputDir/${macAppBundle.appName}.app/Contents/Java")
}
task copyUberJar (type: Copy) {
    from 'build/libs/desktop.jar'
    into "build/$macAppBundle.appOutputDir/${macAppBundle.appName}.app/Contents/Java"
}
task copyMacAppFiles (type: Copy) {
    from '../distribution/macApp'
    into "build/$macAppBundle.appOutputDir/${macAppBundle.appName}.app/Contents"
}
createApp.dependsOn copyUberJar, copyMacAppFiles
copyUberJar.dependsOn dist, cleanAppJavaDir
cleanAppJavaDir.dependsOn generatePlist
//endregion